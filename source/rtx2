#version 450
#define fragment

#include "hexane.glsl"
#include "world.glsl"
#include "vertex.glsl"
#include "transform.glsl"
#include "voxel.glsl"
#include "aabb.glsl"
#include "raycast.glsl"

#define VERTICES_PER_CUBE 6

struct RtxPush {
	BufferId info_id;
	BufferId camera_id;
	BufferId sort_id;
	BufferId transform_id;
	BufferId world_id;
	ImageId perlin_id;
	ImageId prepass_id;
};

decl_push_constant(RtxPush)

decl_buffer(
	Camera,
	{
		mat4 projection;
		mat4 inv_projection;
		f32 far;
		vec2 resolution;
	}
)

#ifdef vertex

#ifdef vertex

vec2 positions[3] = vec2[](
	vec2(-1.0, -1.0),
	vec2(-1.0,  4.0),
	vec2( 4.0, -1.0)
);

void main() {
	gl_Position = vec4(positions[gl_VertexIndex], 0.0, 1.0);
}

#endif

#elif defined fragment

layout(location = 0) out vec4 result;

void main() {
	Buffer(Camera) camera = get_buffer(Camera, push_constant.camera_id);
	Buffer(Transforms) transforms = get_buffer(Transforms, push_constant.transform_id);
	Buffer(World) world = get_buffer(World, push_constant.world_id);
	Image(3D, u32) perlin_img = get_image(3D, u32, push_constant.perlin_id);
	Image(2D, u32) prepass_img = get_image(2D, u32, push_constant.prepass_id);
		

	Transform transform = transforms.data[0];
	Transform eye_transform = transform;
	eye_transform.position.xyz += vec3(0.4, 1.8, 0.4);
	

	vec2 screenPos = (gl_FragCoord.xy / camera.resolution.xy) * 2.0 - 1.0;
	vec4 far = camera.inv_projection * vec4(screenPos, 1, 1);
	far /= far.w;
	vec4 near = camera.inv_projection * vec4(screenPos, 0.0, 1);
	near /= near.w;
	vec3 origin = (compute_transform_matrix(eye_transform) * near).xyz;
	vec3 dir = (compute_transform_matrix(eye_transform) * vec4(normalize(far.xyz), 0)).xyz;
	
	u32 chunk = u32(origin.x) / CHUNK_SIZE + u32(origin.y) / CHUNK_SIZE * AXIS_MAX_CHUNKS + u32(origin.z) / CHUNK_SIZE * AXIS_MAX_CHUNKS * AXIS_MAX_CHUNKS;

	origin = mod(origin, CHUNK_SIZE);

	vec4 color = vec4(0, 0, 0, 1);

	Ray ray;
	ray.chunk_id = world.chunks[chunk].data;
	ray.origin = origin;
	ray.direction = dir;

	RayHit hit;
	
	bool success = ray_cast(ray, hit);
		
		
	if (success) {
		f32 noise_factor = f32(imageLoad(perlin_img, i32vec3(hit.back_step) % i32vec3(imageSize(perlin_img))).r) / f32(~0u);
		if(hit.id == 0) {
			color.xyz = vec3(1, 0, 1);
		}
		if(hit.id == 2) {
			color.xyz = mix(vec3(170, 255, 21) / 256, vec3(34, 139, 34) / 256, noise_factor);
		}
		if(hit.id == 4) {
			color.xyz = mix(vec3(107, 84, 40) / 256, vec3(64, 41, 5) / 256, noise_factor);
		}
		if(hit.mask.x) {
			color.xyz *= 0.5;
		}
		if(hit.mask.z) {
			color.xyz *= 0.75;
		}


		vec4 v_clip_coord = camera.projection * inverse(compute_transform_matrix(transform)) * vec4(transforms.data[chunk + 1].position.xyz + hit.destination, 1.0);
		float f_ndc_depth = v_clip_coord.z / v_clip_coord.w;
		//gl_FragDepth = (f_ndc_depth + 1.0) * 0.4;

	} else {
		discard;
	}	

	result = color;
}

#endif
